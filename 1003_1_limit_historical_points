import cv2
import numpy as np
from collections import deque
import math
import smbus

# ========== I2C Initialization ==========
bus = smbus.SMBus(1)
arduino_address = 0x08  # Arduino I2C address

def int16_to_bytes(val):
    val = int(val)
    if val < 0:
        val = (1 << 16) + val
    high = (val >> 8) & 0xFF
    low = val & 0xFF
    return [high, low]

def send_two_points_16bit(x1, y1, x2, y2):
    data = int16_to_bytes(x1) + int16_to_bytes(y1) + int16_to_bytes(x2) + int16_to_bytes(y2)
    try:
        bus.write_i2c_block_data(arduino_address, 0x00, data)
        print(f"Sent: ({x1}, {y1}), ({x2}, {y2})")
    except Exception as e:
        print(f"I2C Send Error: {e}")
        print(f"po: ({x1}, {y1}), ({x2}, {y2})")

# ========== Color Ranges ==========
lower_red_1 = np.array([0, 100, 50])
upper_red_1 = np.array([10, 255, 255])
lower_red_2 = np.array([170, 100, 50])
upper_red_2 = np.array([180, 255, 255])
lower_black = np.array([0, 0, 0])
upper_black = np.array([180, 255, 50])

# ========== Camera Setup ==========
pipeline = (
    "v4l2src device=/dev/video0 ! "
    "image/jpeg,width=1280,height=720,framerate=60/1 ! "
    "jpegdec ! "
    "videoconvert ! "
    "appsink"
)
video_capture = cv2.VideoCapture(pipeline, cv2.CAP_GSTREAMER)
if not video_capture.isOpened():
    print("Error: Failed to open camera")
    exit()

# ========== Tracking Parameters ==========
TRACKING_SIZE = 110
CURVE_PARAMS = {
    'min_contour_area': 50,
    'approx_epsilon': 0.02,
    'direction_samples': 5
}

# ========== State Variables ==========
tracking_roi = None
position_history = deque(maxlen=10)
intersection_points = []
farthest_point = None
prediction_angle = None
visited_positions = set()
show_path = True

def calculate_distance(pt1, pt2):
    return math.hypot(pt1[0] - pt2[0], pt1[1] - pt2[1])

def detect_black_curve(roi, roi_position, mask_circle):
    x, y, w, h = roi_position
    hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
    raw_mask = cv2.inRange(hsv, lower_black, upper_black)
    mask = cv2.bitwise_and(raw_mask, raw_mask, mask=mask_circle)
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

    current_intersections = []
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    for contour in contours:
        if cv2.contourArea(contour) > CURVE_PARAMS['min_contour_area']:
            perimeter = cv2.arcLength(contour, True)
            epsilon = CURVE_PARAMS['approx_epsilon'] * perimeter
            approx = cv2.approxPolyDP(contour, epsilon, True)
            for point in approx:
                px, py = point[0]
                if px == 0 or px == w - 1 or py == 0 or py == h - 1:
                    global_x = x + px
                    global_y = y + py
                    current_intersections.append((global_x, global_y))
    return current_intersections, mask

# ========== Main Loop ==========
while True:
    ret, frame = video_capture.read()
    if not ret:
        break

    frame_height, frame_width = frame.shape[:2]
    detected = False
    intersection_points = []
    farthest_point = None
    prediction_angle = None

    if tracking_roi is not None:
        x, y, w, h = tracking_roi
        x, y = max(0, x), max(0, y)
        w = min(w, frame_width - x)
        h = min(h, frame_height - y)

        if w > 0 and h > 0:
            roi = frame[y:y + h, x:x + w]
            mask_circle = np.zeros((h, w), dtype=np.uint8)
            cv2.circle(mask_circle, (w // 2, h // 2), min(w, h) // 2, 255, -1)
            roi = cv2.bitwise_and(roi, roi, mask=mask_circle)

            hsv_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
            red_mask_full = cv2.bitwise_or(
                cv2.inRange(hsv_roi, lower_red_1, upper_red_1),
                cv2.inRange(hsv_roi, lower_red_2, upper_red_2)
            )
            red_mask = cv2.bitwise_and(red_mask_full, red_mask_full, mask=mask_circle)
            kernel = np.ones((5, 5), np.uint8)
            red_mask = cv2.morphologyEx(red_mask, cv2.MORPH_OPEN, kernel)
            contours, _ = cv2.findContours(red_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

            for contour in contours:
                if cv2.contourArea(contour) > 200:
                    (x_local, y_local, w_local, h_local) = cv2.boundingRect(contour)
                    center_x = x + x_local + w_local // 2
                    center_y = y + y_local + h_local // 2

                    new_x = max(0, min(center_x - TRACKING_SIZE // 2, frame_width - TRACKING_SIZE))
                    new_y = max(0, min(center_y - TRACKING_SIZE // 2, frame_height - TRACKING_SIZE))
                    tracking_roi = (new_x, new_y, TRACKING_SIZE, TRACKING_SIZE)

                    position_history.append((center_x, center_y))
                    for i in range(12):
                        angle = 2 * math.pi * i / 12
                        vx = int(center_x + 3 * math.cos(angle))
                        vy = int(center_y + 3 * math.sin(angle))
                            if 0 <= vx < frame_width and 0 <= vy < frame_height:
                                if all(math.hypot(vx - ex, vy - ey) >= 20 for ex, ey in visited_positions):
                                visited_positions.add((vx, vy))

                            
                    for dx in range(-2, 3):
                        for dy in range(-2, 3):
                            vx = center_x + dx
                            vy = center_y + dy
                            if 0 <= vx < frame_width and 0 <= vy < frame_height:
                                if all(math.hypot(vx - ex, vy - ey) >= 20 for ex, ey in visited_positions):
                                visited_positions.add((vx, vy))


                    erase_radius = 3.5 * TRACKING_SIZE
                    visited_positions = {
                        (vx, vy) for vx, vy in visited_positions
                        if calculate_distance((vx, vy), (center_x, center_y)) <= erase_radius
                    }

                    # 检测黑色曲线并获取二值遮罩
                    intersection_points, black_mask = detect_black_curve(roi, (x, y, w, h), mask_circle)

                    # 将黑白遮罩转换为彩色三通道图像
                    colored_mask = cv2.cvtColor(black_mask, cv2.COLOR_GRAY2BGR)

                    # 将彩色黑线遮罩与原 ROI 混合，形成带阴影的图层
                    blended = cv2.addWeighted(roi, 0.7, colored_mask, 0.3, 0)

                    # 只在圆形区域内替换为 blended，避免方形块出现
                    roi_with_shadow = frame[y:y + h, x:x + w].copy()
                    mask_3ch = cv2.merge([mask_circle]*3)
                    np.copyto(roi_with_shadow, blended, where=mask_3ch.astype(bool))
                    frame[y:y + h, x:x + w] = roi_with_shadow
                    detected = True
                    break

    if not detected:
        tracking_roi = None
        hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        red_mask = cv2.bitwise_or(
            cv2.inRange(hsv_frame, lower_red_1, upper_red_1),
            cv2.inRange(hsv_frame, lower_red_2, upper_red_2)
        )
        kernel = np.ones((5, 5), np.uint8)
        red_mask = cv2.morphologyEx(red_mask, cv2.MORPH_OPEN, kernel)
        contours, _ = cv2.findContours(red_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        for contour in contours:
            if cv2.contourArea(contour) > 20:
                (x, y, w, h) = cv2.boundingRect(contour)
                center_x = x + w // 2
                center_y = y + h // 2
                new_x = max(0, min(center_x - TRACKING_SIZE // 2, frame_width - TRACKING_SIZE))
                new_y = max(0, min(center_y - TRACKING_SIZE // 2, frame_height - TRACKING_SIZE))
                tracking_roi = (new_x, new_y, TRACKING_SIZE, TRACKING_SIZE)
                break

    if visited_positions and intersection_points and tracking_roi:
        visited_list = list(visited_positions)
        x_roi, y_roi, w_roi, h_roi = tracking_roi
        def is_outside_roi(px, py):
            return not (x_roi <= px <= x_roi + w_roi and y_roi <= py <= y_roi + h_roi)
        filtered_visited = [(vx, vy) for vx, vy in visited_list if is_outside_roi(vx, vy)]
        for (fx, fy) in filtered_visited:
            cv2.circle(frame, (fx, fy), 2, (144, 238, 144), -1)
        if filtered_visited:
            total = len(filtered_visited)
            best_score = -1
            for idx_ip, ip in enumerate(intersection_points):
                score = sum(((total-idx) / total) * calculate_distance(ip, vp) for idx, vp in enumerate(filtered_visited))
                if score > best_score:
                    best_score = score
                    farthest_point = ip

    if farthest_point and position_history:
        current_pos = position_history[-1]
        dx = farthest_point[0] - current_pos[0]
        dy = farthest_point[1] - current_pos[1]
        prediction_angle = (math.degrees(math.atan2(-dy, dx)) + 360) % 360
        send_two_points_16bit(current_pos[0], current_pos[1], farthest_point[0], farthest_point[1])

    if tracking_roi:
        x_roi, y_roi, w_roi, h_roi = tracking_roi
        center_x = x_roi + w_roi // 2
        center_y = y_roi + h_roi // 2
        radius = w_roi // 2
        cv2.circle(frame, (center_x, center_y), radius, (0, 255, 255), 2)

    for idx, offset in enumerate([2, 4, 6, 8, 10]):
        if len(position_history) >= offset:
            pos = position_history[-offset]
            color = (0, 255 - idx * 50, idx * 50)
            cv2.circle(frame, pos, 7 - idx, color, -1)
            cv2.putText(frame, f"T-{offset}: {pos}", (10, 30 + idx * 25), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    for idx, (px, py) in enumerate(intersection_points):
        cv2.circle(frame, (px, py), 5, (0, 255, 255), -1)
        cv2.putText(frame, f"{idx+1}", (px+5, py-5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 1)

    if farthest_point and prediction_angle is not None:
        cv2.circle(frame, farthest_point, 10, (255, 192, 203), -1)
        if position_history:
            current_pos = position_history[-1]
            cv2.arrowedLine(frame, current_pos, farthest_point, (255, 192, 203), 2, tipLength=0.3)
            cv2.putText(frame, f"Angle: {prediction_angle:.1f}°", (farthest_point[0]+15, farthest_point[1]-15),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 192, 203), 2)

    if show_path:
        for vx, vy in visited_positions:
            cv2.circle(frame, (vx, vy), 1, (255, 255, 255), -1)

    cv2.imshow("Tracking", frame)
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('h'):
        show_path = not show_path
    elif key == ord('c'):
        visited_positions.clear()
        if position_history:
            current_x, current_y = position_history[-1]
            for i in range(100):
                angle = np.random.uniform(0, 2 * np.pi)
                radius = np.random.uniform(0, 10)
                dx = int(radius * np.cos(angle))
                dy = int(radius * np.sin(angle))
                vx = current_x + dx
                vy = current_y + dy
                if 0 <= vx < frame_width and 0 <= vy < frame_height:
                    visited_positions.add((vx, vy))
            print(f"[Hotkey] Added 100 historical points near ({current_x}, {current_y})")
        else:
            print("[Hotkey] No current position to add points.")

video_capture.release()
cv2.destroyAllWindows()
