#include <Arduino.h>
#include <Servo.h>
#include <Wire.h>

// Servo objects for X and Y axes
Servo motorX, motorY;

////////////////////////////////////////////
// I2C Settings
#define I2C_ADDR 0x08          // Must match Pi's address
#define EXPECTED_BYTES 8       // 4x int16_t (currentX, currentY, desiredX, desiredY)

// Servo angle limits (calibrate these!)
#define BASE_ANGLE_X 43        // Neutral position X
#define MIN_ANGLE_X (BASE_ANGLE_X - 15)  // Wider tilt range
#define MAX_ANGLE_X (BASE_ANGLE_X + 15)
#define BASE_ANGLE_Y 50        // Neutral position Y
#define MIN_ANGLE_Y (BASE_ANGLE_Y - 15)
#define MAX_ANGLE_Y (BASE_ANGLE_Y + 15)

////////////////////////////////////////////
// PID Control
float Kp = 2.5;                // Proportional gain
float Ki = 0.03;               // Integral gain
float Kd = 0.3;                // Derivative gain
float integralLimit = 15.0;    // Anti-windup

// Axis identifiers
const int x_axis = 0;
const int y_axis = 1;

// PID state variables
float prevError[2] = {0, 0};
float integral[2] = {0, 0};
unsigned long lastPIDTime = 0;

// I2C Data
int16_t current_x = 0, current_y = 0;
int16_t desired_x = 0, desired_y = 0;

////////////////////////////////////////////
// I2C Receive Callback
void receiveData(int byteCount) {
  if (byteCount >= EXPECTED_BYTES) {
    uint8_t buffer[EXPECTED_BYTES];
    for (int i = 0; i < EXPECTED_BYTES && Wire.available(); i++) {
      buffer[i] = Wire.read();
    }

    // Reconstruct 16-bit signed integers
    current_x = (int16_t)((buffer[0] << 8) | buffer[1];
    current_y = (int16_t)((buffer[2] << 8) | buffer[3];
    desired_x = (int16_t)((buffer[4] << 8) | buffer[4];
    desired_y = (int16_t)((buffer[6] << 8) | buffer[7];
  }
}

////////////////////////////////////////////
// PID Controller with Delta Time
float PIDControl(float current, float target, int axis) {
  unsigned long now = millis();
  float deltaTime = (now - lastPIDTime) / 1000.0;
  lastPIDTime = now;

  // Safeguard against invalid time
  if (deltaTime <= 0 || deltaTime > 0.5) deltaTime = 0.02;

  float error = target - current;

  // Reset integral on large target changes
  if (abs(target - prevError[axis]) > 20) {
    integral[axis] = 0;
  }

  integral[axis] += error * deltaTime;
  integral[axis] = constrain(integral[axis], -integralLimit, integralLimit);

  float derivative = (error - prevError[axis]) / deltaTime;
  float output = (Kp * error) + (Ki * integral[axis]) + (Kd * derivative);
  
  prevError[axis] = error;
  return output;
}

////////////////////////////////////////////
// Coordinate Scaling (Match Pi's 1280x720 resolution)
void scaleCoordinates() {
  // Map X: 0-1280 → 0-230, Y: 0-720 → 0-230 (inverted Y-axis)
  current_x = map(current_x, 0, 1280, 0, 230);
  current_y = map(720 - current_y, 0, 720, 0, 230);
  desired_x = map(desired_x, 0, 1280, 0, 230);
  desired_y = map(720 - desired_y, 0, 720, 0, 230);
}

////////////////////////////////////////////
// Motor Control with Deadzone Compensation
void moveMotor(Servo &motor, float output, float baseAngle) {
  // Overcome static friction
  if (abs(output) < 1.5) {
    output = (output > 0) ? 1.5 : -1.5;
  }

  float angle = baseAngle + output;
  angle = constrain(angle, 
                   (baseAngle == BASE_ANGLE_X) ? MIN_ANGLE_X : MIN_ANGLE_Y,
                   (baseAngle == BASE_ANGLE_X) ? MAX_ANGLE_X : MAX_ANGLE_Y);
  
  motor.write(angle);
}

////////////////////////////////////////////
// Main Control Logic
void updateMotors() {
  scaleCoordinates();

  // X-axis: current vs desired X position
  float tiltX = PIDControl(current_x, desired_x, x_axis);
  
  // Y-axis: current vs desired Y position
  float tiltY = PIDControl(current_y, desired_y, y_axis);

  moveMotor(motorX, tiltX, BASE_ANGLE_X);
  moveMotor(motorY, tiltY, BASE_ANGLE_Y);

  // Debug output
  Serial.print("Current: ");
  Serial.print(current_x); Serial.print(", "); Serial.print(current_y);
  Serial.print(" | Desired: ");
  Serial.print(desired_x); Serial.print(", "); Serial.print(desired_y);
  Serial.print(" | Tilt: ");
  Serial.print(tiltX); Serial.print(", "); Serial.println(tiltY);
}

////////////////////////////////////////////
// Setup & Loop
void setup() {
  Serial.begin(115200);
  
  motorX.attach(3);  // PWM pin for X-axis
  motorY.attach(5);  // PWM pin for Y-axis
  motorX.write(BASE_ANGLE_X);
  motorY.write(BASE_ANGLE_Y);

  Wire.begin(I2C_ADDR);
  Wire.onReceive(receiveData);
  
  Serial.println("System Ready");
}

void loop() {
  static unsigned long lastUpdate = 0;
  
  if (millis() - lastUpdate >= 20) {  // 50Hz update rate
    updateMotors();
    lastUpdate = millis();
  }
}
