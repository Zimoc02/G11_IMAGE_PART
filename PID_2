#include <Arduino.h>
#include <Servo.h>
#include <Wire.h>

// ========== Servo Configuration ==========
Servo motorX, motorY;

#define I2C_ADDR 0x08
#define EXPECTED_BYTES 8  // 4 x int16_t

#define BASE_ANGLE_X 43
#define BASE_ANGLE_Y 50
#define MIN_ANGLE_X (BASE_ANGLE_X - 8)
#define MAX_ANGLE_X (BASE_ANGLE_X + 8)
#define MIN_ANGLE_Y (BASE_ANGLE_Y - 6)
#define MAX_ANGLE_Y (BASE_ANGLE_Y + 6)

// ========== PID Parameters ==========
float Kp = 2.2;
float Ki = 0.1;
float Kd = 0.75;
float integralLimit = 15.0;
float feedforwardGain = 0.3;

const float VELOCITY_ALPHA = 0.2;     // 平滑因子
const float ANGLE_LIMIT_PER_LOOP = 2.0; // 舵机限速

// ========== PID State ==========
float prevError[2] = {0, 0};
float integral[2] = {0, 0};
float velocity[2] = {0, 0};
float prevPosition[2] = {0, 0};

float prevAngle[2] = {BASE_ANGLE_X, BASE_ANGLE_Y};
unsigned long lastPIDTime = 0;

// ========== I2C Data ==========
int16_t current_x = 0, current_y = 0;
int16_t desired_x = 0, desired_y = 0;

void receiveData(int byteCount) {
  if (byteCount >= EXPECTED_BYTES) {
    uint8_t buffer[EXPECTED_BYTES];
    for (int i = 0; i < EXPECTED_BYTES && Wire.available(); i++) {
      buffer[i] = Wire.read();
    }

    current_x = (int16_t)((buffer[0] << 8) | buffer[1]);
    current_y = (int16_t)((buffer[2] << 8) | buffer[3]);
    desired_x = (int16_t)((buffer[4] << 8) | buffer[5]);
    desired_y = (int16_t)((buffer[6] << 8) | buffer[7]);
  }
}

// ========== Coordinate Scaling ==========
void scaleCoordinates() {
  current_x = map(current_x, 0, 1280, 0, 230);
  current_y = map(current_y, 0, 720, 0, 230);
  desired_x = map(desired_x, 0, 1280, 0, 230);
  desired_y = map(desired_y, 0, 720, 0, 230);
}

// ========== PID Calculation ==========
float PIDControl(int axis, float current, float target, float deltaTime) {
  float error;

  // ✅ 修改：按 axis 决定误差方向
  if (axis == 0) {
    error = target - current;  // X轴：current > desired，error 为负 → 向下
  } else {
    error = current - target;  // Y轴：current > desired，error 为正 → 向上
  }

  if (abs(error - prevError[axis]) > 30) {
    integral[axis] = 0;
  }

  integral[axis] += error * deltaTime;
  integral[axis] = constrain(integral[axis], -integralLimit, integralLimit);

  float derivative = (error - prevError[axis]) / deltaTime;
  prevError[axis] = error;

  float output = Kp * error + Ki * integral[axis] + Kd * derivative;
  output += feedforwardGain * error;
  output -= 1.2 * velocity[axis];

  return output;
}

// ========== Servo Write with Angle Rate Limiting ==========
void moveServoSmooth(Servo& servo, float output, int axis) {
  float base = (axis == 0) ? BASE_ANGLE_X : BASE_ANGLE_Y;
  float minA = (axis == 0) ? MIN_ANGLE_X : MIN_ANGLE_Y;
  float maxA = (axis == 0) ? MAX_ANGLE_X : MAX_ANGLE_Y;

  // Deadzone compensation
  if (abs(output) < 1.5) {
    output = (output > 0) ? 1.8 : -1.8;
  }

  float targetAngle = constrain(base + output, minA, maxA);
  float delta = targetAngle - prevAngle[axis];

  // 限制最大变化速率
  if (abs(delta) > ANGLE_LIMIT_PER_LOOP) {
    targetAngle = prevAngle[axis] + (delta > 0 ? ANGLE_LIMIT_PER_LOOP : -ANGLE_LIMIT_PER_LOOP);
  }

  servo.write(targetAngle);
  prevAngle[axis] = targetAngle;
}

// ========== Main Control Loop ==========
void updateMotors() {
  unsigned long now = millis();
  float deltaTime = (now - lastPIDTime) / 1000.0;
  if (deltaTime <= 0 || deltaTime > 0.5) deltaTime = 0.02;
  lastPIDTime = now;

  scaleCoordinates();

  // 平滑速度估计
  float rawVx = (current_x - prevPosition[0]) / deltaTime;
  float rawVy = (current_y - prevPosition[1]) / deltaTime;
  velocity[0] = VELOCITY_ALPHA * velocity[0] + (1 - VELOCITY_ALPHA) * rawVx;
  velocity[1] = VELOCITY_ALPHA * velocity[1] + (1 - VELOCITY_ALPHA) * rawVy;
  prevPosition[0] = current_x;
  prevPosition[1] = current_y;

  // PID 控制
  float tiltX = PIDControl(0, current_x, desired_x, deltaTime);
  float tiltY = PIDControl(1, current_y, desired_y, deltaTime);

  moveServoSmooth(motorX, tiltX, 0);
  moveServoSmooth(motorY, tiltY, 1);

  // Debug 输出
  Serial.print("Current: ");
  Serial.print(current_x); Serial.print(", "); Serial.print(current_y);
  Serial.print(" | Desired: ");
  Serial.print(desired_x); Serial.print(", "); Serial.print(desired_y);
  Serial.print(" | Tilt: ");
  Serial.print(tiltX); Serial.print(", "); Serial.println(tiltY);

  // ===== Y轴调试信息 =====
  float baseY = BASE_ANGLE_Y;
  float outputY = tiltY;
  float targetAngleY = constrain(baseY + outputY, MIN_ANGLE_Y, MAX_ANGLE_Y);
  float deltaY = targetAngleY - prevAngle[1];

  Serial.print("[Y轴调试] current_y: "); Serial.print(current_y);
  Serial.print(" | desired_y: "); Serial.print(desired_y);
  Serial.print(" | error: "); Serial.print(current_y - desired_y);
  Serial.print(" | tiltY: "); Serial.print(tiltY);
  Serial.print(" | targetAngleY: "); Serial.print(targetAngleY);
  Serial.print(" | deltaY: "); Serial.println(deltaY);

}

// ========== Setup ==========
void setup() {
  Serial.begin(115200);
  motorX.attach(5);  // X轴连5号引脚
  motorY.attach(3);  // Y轴连3号引脚
  motorX.write(BASE_ANGLE_X);
  motorY.write(BASE_ANGLE_Y);

  Wire.begin(I2C_ADDR);
  Wire.onReceive(receiveData);

  lastPIDTime = millis();
  Serial.println("System Ready");
}

// ========== Main Loop ==========
void loop() {
  static unsigned long lastUpdate = 0;
  if (millis() - lastUpdate >= 20) {  // 50Hz 更新
    updateMotors();
    lastUpdate = millis();
  }
  handleSerialInput();  // 串口命令处理
}

String inputCommand = "";

void processSerialCommand(String cmd) {
  cmd.trim();
  if (cmd.startsWith("kp=")) {
    Kp = cmd.substring(3).toFloat();
    Serial.print("Updated Kp: "); Serial.println(Kp);
  } else if (cmd.startsWith("ki=")) {
    Ki = cmd.substring(3).toFloat();
    Serial.print("Updated Ki: "); Serial.println(Ki);
  } else if (cmd.startsWith("kd=")) {
    Kd = cmd.substring(3).toFloat();
    Serial.print("Updated Kd: "); Serial.println(Kd);
  } else if (cmd.startsWith("ff=")) {
    feedforwardGain = cmd.substring(3).toFloat();
    Serial.print("Updated Feedforward Gain: "); Serial.println(feedforwardGain);
  } else if (cmd == "print") {
    Serial.print("Kp: "); Serial.print(Kp);
    Serial.print(" | Ki: "); Serial.print(Ki);
    Serial.print(" | Kd: "); Serial.print(Kd);
    Serial.print(" | FF: "); Serial.println(feedforwardGain);
  } else {
    Serial.println("Unknown command.");
  }
}

void handleSerialInput() {
  while (Serial.available()) {
    char ch = Serial.read();
    if (ch == '\n' || ch == '\r') {
      if (inputCommand.length() > 0) {
        processSerialCommand(inputCommand);
        inputCommand = "";
      }
    } else {
      inputCommand += ch;
    }
  }
}
