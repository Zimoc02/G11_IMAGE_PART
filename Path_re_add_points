import cv2
import numpy as np
import math
import smbus
from collections import deque
from scipy.spatial import cKDTree

# I2C 设置
bus = smbus.SMBus(1)
arduino_address = 0x08

def int16_to_bytes(val):
    val = int(val)
    if val < 0:
        val = (1 << 16) + val
    return [(val >> 8) & 0xFF, val & 0xFF]

def send_two_points_16bit(x1, y1, x2, y2):
    data = int16_to_bytes(x1) + int16_to_bytes(y1) + int16_to_bytes(x2) + int16_to_bytes(y2)
    try:
        bus.write_i2c_block_data(arduino_address, 0x00, data)
        print(f"Sent: ({x1}, {y1}) -> ({x2}, {y2})")
    except Exception as e:
        print(f"I2C Send Error: {e}")

# 参数
TRACKING_SIZE = 100
INTERPOLATION_COUNT = 2  # 每段插入几个等距点，可调

CURVE_PARAMS = {'min_contour_area': 50, 'approx_epsilon': 0.02, 'direction_samples': 5}
lower_red_1 = np.array([0, 100, 50])
upper_red_1 = np.array([10, 255, 255])
lower_red_2 = np.array([170, 100, 50])
upper_red_2 = np.array([180, 255, 255])
lower_black = np.array([0, 0, 0])
upper_black = np.array([180, 255, 50])

# 状态变量
tracking_roi = None
position_history = deque(maxlen=10)
intersection_points = []
farthest_point = None
prediction_angle = None
visited_positions = set()
show_path = True

# 路径图层函数
def generate_path_overlay(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)
    contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    selected_path_image = np.zeros_like(image)
    for cnt in contours:
        area = cv2.contourArea(cnt)
        perimeter = cv2.arcLength(cnt, True)
        if 50 < area < 5000 and perimeter > 80:
            approx = cv2.approxPolyDP(cnt, 0.02 * perimeter, True)
            if len(approx) > 5:
                cv2.drawContours(selected_path_image, [cnt], -1, (255, 255, 255), 2)

    gray_selected = cv2.cvtColor(selected_path_image, cv2.COLOR_BGR2GRAY)
    _, binary = cv2.threshold(gray_selected, 127, 255, cv2.THRESH_BINARY)
    skeleton = cv2.ximgproc.thinning(binary)
    non_zero_points = np.column_stack(np.where(skeleton > 0))

    # 红球检测
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    red_mask = cv2.bitwise_or(
        cv2.inRange(hsv, lower_red_1, upper_red_1),
        cv2.inRange(hsv, lower_red_2, upper_red_2)
    )
    kernel = np.ones((5, 5), np.uint8)
    red_mask = cv2.morphologyEx(red_mask, cv2.MORPH_OPEN, kernel)
    contours, _ = cv2.findContours(red_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    red_center = None
    max_area = 0
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area > 100 and area > max_area:
            x, y, w, h = cv2.boundingRect(cnt)
            red_center = (y + h // 2, x + w // 2)
            max_area = area

    # ===== fallback 起点 =====
    if red_center is None:
        print("⚠️ 未检测到红球，自动使用路径骨架上的点作为起点")
        if len(non_zero_points) == 0:
            return image.copy(), None, []
        center_yx = np.array([image.shape[0] // 2, image.shape[1] // 2])
        distances = np.linalg.norm(non_zero_points - center_yx, axis=1)
        nearest_idx = np.argmin(distances)
        red_center = tuple(non_zero_points[nearest_idx])

    # 稀疏点处理
    kdtree = cKDTree(non_zero_points)
    placed_points, used_indices = [], set()
    for idx, point in enumerate(non_zero_points):
        if idx not in used_indices:
            placed_points.append(point)
            used_indices.update(kdtree.query_ball_point(point, r=15))
    placed_points = np.array(placed_points)

    # 从红球出发构造路径
    all_points = placed_points.tolist()
    ordered_path = [red_center]
    used = set()
    current_point = red_center
    kdtree_path = cKDTree(all_points)
    while True:
        distances, indices = kdtree_path.query(current_point, k=len(all_points))
        next_point = None
        for idx in indices:
            candidate = tuple(all_points[idx])
            if candidate not in used and calculate_distance(current_point, candidate) < 65:
                next_point = candidate
                break
        if next_point is None:
            break
        ordered_path.append(next_point)
        used.add(next_point)
        current_point = next_point

    # 可视化图层
    overlay = image.copy()
    for i in range(len(ordered_path) - 1):
        cv2.line(overlay, (int(ordered_path[i][1]), int(ordered_path[i][0])),
                          (int(ordered_path[i + 1][1]), int(ordered_path[i + 1][0])), (0, 255, 0), 2)
    for p in ordered_path:
        cv2.circle(overlay, (int(p[1]), int(p[0])), 4, (255, 0, 0), -1)
    cv2.circle(overlay, (int(red_center[1]), int(red_center[0])), 10, (0, 255, 255), 2)
    cv2.putText(overlay, "Start", (int(red_center[1]) + 10, int(red_center[0]) - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)

        # ===== 插值：每两个相邻点之间插入 INTERPOLATION_COUNT 个等距点 =====
    refined_path = []
    for i in range(len(ordered_path) - 1):
        p1 = np.array(ordered_path[i])
        p2 = np.array(ordered_path[i + 1])
        
        # 添加起点
        refined_path.append(tuple(p1))

        # 插值点
        for j in range(1, INTERPOLATION_COUNT + 1):
            ratio = j / (INTERPOLATION_COUNT + 1)
            new_point = tuple(((1 - ratio) * p1 + ratio * p2).astype(int))
            refined_path.append(new_point)

    # 添加最后一个终点
    refined_path.append(tuple(ordered_path[-1]))

    # 可视化 refined_path（用黄色线）
    for i in range(len(refined_path) - 1):
        cv2.line(overlay, (int(refined_path[i][1]), int(refined_path[i][0])),
                          (int(refined_path[i + 1][1]), int(refined_path[i + 1][0])), (0, 255, 255), 1)

    return overlay, red_center, refined_path


def calculate_distance(pt1, pt2):
    return math.hypot(pt1[0] - pt2[0], pt1[1] - pt2[1])

# 摄像头启动并提取路径
pipeline = (
    "v4l2src device=/dev/video0 ! "
    "image/jpeg,width=1280,height=720,framerate=60/1 ! "
    "jpegdec ! videoconvert ! appsink"
)
video_capture = cv2.VideoCapture(pipeline, cv2.CAP_GSTREAMER)
if not video_capture.isOpened():
    print("错误：无法打开摄像头")
    exit()

ret, initial_frame = video_capture.read()
if not ret:
    print("错误：无法获取初始图像")
    exit()

path_overlay, red_center, ordered_path = generate_path_overlay(initial_frame)
print(f"路径起点：{red_center}，路径长度：{len(ordered_path)}")

while True:
    ret, frame = video_capture.read()
    if not ret:
        break

    frame = cv2.addWeighted(path_overlay, 0.6, frame, 0.4, 0)
    cv2.imshow("Red Ball Path Tracking", frame)

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('p'):
        ret, new_frame = video_capture.read()
        if ret:
            path_overlay, red_center, ordered_path = generate_path_overlay(new_frame)
            print("[热键P] 重新生成路径图层")

video_capture.release()
cv2.destroyAllWindows()
